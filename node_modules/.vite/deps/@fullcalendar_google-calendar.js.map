{
  "version": 3,
  "sources": ["../../@fullcalendar/google-calendar/index.js"],
  "sourcesContent": ["import { JsonRequestError, createPlugin } from '@fullcalendar/core/index.js';\nimport { requestJson, addDays, identity } from '@fullcalendar/core/internal.js';\n\n// TODO: expose somehow\nconst API_BASE = 'https://www.googleapis.com/calendar/v3/calendars';\nconst eventSourceDef = {\n    parseMeta(refined) {\n        let { googleCalendarId } = refined;\n        if (!googleCalendarId && refined.url) {\n            googleCalendarId = parseGoogleCalendarId(refined.url);\n        }\n        if (googleCalendarId) {\n            return {\n                googleCalendarId,\n                googleCalendarApiKey: refined.googleCalendarApiKey,\n                googleCalendarApiBase: refined.googleCalendarApiBase,\n                extraParams: refined.extraParams,\n            };\n        }\n        return null;\n    },\n    fetch(arg, successCallback, errorCallback) {\n        let { dateEnv, options } = arg.context;\n        let meta = arg.eventSource.meta;\n        let apiKey = meta.googleCalendarApiKey || options.googleCalendarApiKey;\n        if (!apiKey) {\n            errorCallback(new Error('Specify a googleCalendarApiKey. See https://fullcalendar.io/docs/google-calendar'));\n        }\n        else {\n            let url = buildUrl(meta);\n            // TODO: make DRY with json-feed-event-source\n            let { extraParams } = meta;\n            let extraParamsObj = typeof extraParams === 'function' ? extraParams() : extraParams;\n            let requestParams = buildRequestParams(arg.range, apiKey, extraParamsObj, dateEnv);\n            return requestJson('GET', url, requestParams).then(([body, response]) => {\n                if (body.error) {\n                    errorCallback(new JsonRequestError('Google Calendar API: ' + body.error.message, response));\n                }\n                else {\n                    successCallback({\n                        rawEvents: gcalItemsToRawEventDefs(body.items, requestParams.timeZone),\n                        response,\n                    });\n                }\n            }, errorCallback);\n        }\n    },\n};\nfunction parseGoogleCalendarId(url) {\n    let match;\n    // detect if the ID was specified as a single string.\n    // will match calendars like \"asdf1234@calendar.google.com\" in addition to person email calendars.\n    if (/^[^/]+@([^/.]+\\.)*(google|googlemail|gmail)\\.com$/.test(url)) {\n        return url;\n    }\n    if ((match = /^https:\\/\\/www.googleapis.com\\/calendar\\/v3\\/calendars\\/([^/]*)/.exec(url)) ||\n        (match = /^https?:\\/\\/www.google.com\\/calendar\\/feeds\\/([^/]*)/.exec(url))) {\n        return decodeURIComponent(match[1]);\n    }\n    return null;\n}\nfunction buildUrl(meta) {\n    let apiBase = meta.googleCalendarApiBase;\n    if (!apiBase) {\n        apiBase = API_BASE;\n    }\n    return apiBase + '/' + encodeURIComponent(meta.googleCalendarId) + '/events';\n}\nfunction buildRequestParams(range, apiKey, extraParams, dateEnv) {\n    let params;\n    let startStr;\n    let endStr;\n    if (dateEnv.canComputeOffset) {\n        // strings will naturally have offsets, which GCal needs\n        startStr = dateEnv.formatIso(range.start);\n        endStr = dateEnv.formatIso(range.end);\n    }\n    else {\n        // when timezone isn't known, we don't know what the UTC offset should be, so ask for +/- 1 day\n        // from the UTC day-start to guarantee we're getting all the events\n        // (start/end will be UTC-coerced dates, so toISOString is okay)\n        startStr = addDays(range.start, -1).toISOString();\n        endStr = addDays(range.end, 1).toISOString();\n    }\n    params = Object.assign(Object.assign({}, (extraParams || {})), { key: apiKey, timeMin: startStr, timeMax: endStr, singleEvents: true, maxResults: 9999 });\n    if (dateEnv.timeZone !== 'local') {\n        params.timeZone = dateEnv.timeZone;\n    }\n    return params;\n}\nfunction gcalItemsToRawEventDefs(items, gcalTimezone) {\n    return items.map((item) => gcalItemToRawEventDef(item, gcalTimezone));\n}\nfunction gcalItemToRawEventDef(item, gcalTimezone) {\n    let url = item.htmlLink || null;\n    // make the URLs for each event show times in the correct timezone\n    if (url && gcalTimezone) {\n        url = injectQsComponent(url, 'ctz=' + gcalTimezone);\n    }\n    return {\n        id: item.id,\n        title: item.summary,\n        start: item.start.dateTime || item.start.date,\n        end: item.end.dateTime || item.end.date,\n        url,\n        location: item.location,\n        description: item.description,\n        attachments: item.attachments || [],\n        extendedProps: (item.extendedProperties || {}).shared || {},\n    };\n}\n// Injects a string like \"arg=value\" into the querystring of a URL\n// TODO: move to a general util file?\nfunction injectQsComponent(url, component) {\n    // inject it after the querystring but before the fragment\n    return url.replace(/(\\?.*?)?(#|$)/, (whole, qs, hash) => (qs ? qs + '&' : '?') + component + hash);\n}\n\nconst OPTION_REFINERS = {\n    googleCalendarApiKey: String,\n};\n\nconst EVENT_SOURCE_REFINERS = {\n    googleCalendarApiKey: String,\n    googleCalendarId: String,\n    googleCalendarApiBase: String,\n    extraParams: identity,\n};\n\nvar index = createPlugin({\n    name: '@fullcalendar/google-calendar',\n    eventSourceDefs: [eventSourceDef],\n    optionRefiners: OPTION_REFINERS,\n    eventSourceRefiners: EVENT_SOURCE_REFINERS,\n});\n\nexport { index as default };\n"],
  "mappings": "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",
  "names": []
}
